import { useState, useEffect } from 'react';
import { usePOS, Product } from '@/contexts/POSContext';
import { useAuth } from '@/contexts/AuthContext';
import { cn } from '@/lib/utils';
import {
  Minus,
  Plus,
  History,
  Edit2,
  Trash2,
  Package,
  Search,
  AlertTriangle,
} from 'lucide-react';
import { IconWrapper } from '@/components/ui/IconWrapper';
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';

interface StockAdjustment {
  type: 'increase' | 'decrease';
  reason: string;
  quantity: number;
  note?: string;
}

import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/components/ui/tabs';
import ProductPermissions from '@/components/ProductPermissions';
import { StorageTable } from '@/components/StorageTable';
import { DistributionTable } from '@/components/DistributionTable';
import { 
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog';
import { toast } from '@/hooks/use-toast';

const Products = () => {
  const posContext = usePOS();
  const { state, deleteProduct, addProduct, updateProduct } = posContext;
  const { user } = useAuth();
  const isAdmin = user?.user_metadata?.role === 'admin';
  console.log('User auth state:', { user, metadata: user?.user_metadata, isAdmin });
  
  useEffect(() => {
    if (!user) {
      toast({
        title: "Akses Ditolak",
        description: "Anda harus login terlebih dahulu.",
        variant: "destructive"
      });
      return;
    }
  }, [user]);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [editingProduct, setEditingProduct] = useState<Product | null>(null);
  const [isStockAdjustmentOpen, setIsStockAdjustmentOpen] = useState(false);
  const [stockAdjustment, setStockAdjustment] = useState<StockAdjustment>({
    type: 'increase',
    reason: '',
    quantity: 1,
    note: ''
  });
  const [adjustingProduct, setAdjustingProduct] = useState<Product | null>(null);
  const [formData, setFormData] = useState<Omit<Product, 'id'>>({
    name: '',
    sku: '',
    price: 0,
    stock: 0,
    category: '',
    description: '',
    image: undefined
  });

  const categories = ['all', ...Array.from(new Set(state.products.map(p => p.category)))];

  const resetForm = () => {
    setFormData({
      name: '',
      sku: '',
      price: 0,
      stock: 0,
      category: '',
      description: '',
      image: undefined
    });
    setEditingProduct(null);
    setIsAddDialogOpen(false);
  };

  const handleEdit = (product: Product) => {
    if (!isAdmin) {
      toast({
        title: "Akses Ditolak",
        description: "Hanya administrator yang dapat mengubah produk.",
        variant: "destructive"
      });
      return;
    }

    setEditingProduct(product);
    setFormData({
      name: product.name,
      sku: product.sku,
      price: product.price,
      stock: product.stock,
      category: product.category,
      description: product.description || ''
    });
    setIsAddDialogOpen(true);
  };

  const handleDelete = async (product: Product) => {
    if (!isAdmin) {
      toast({
        title: "Akses Ditolak", 
        description: "Hanya administrator yang dapat menghapus produk.",
        variant: "destructive"
      });
      return;
    }

    try {
      await deleteProduct(product.id);
      toast({
        title: "Produk dihapus",
        description: `${product.name} telah dihapus dari katalog.`,
      });
    } catch (error) {
      console.error('Error deleting product:', error);
      toast({
        title: "Gagal menghapus produk",
        description: "Terjadi kesalahan saat menghapus produk.",
        variant: "destructive",
      });
    }
  };

  const filteredProducts = state.products.filter(product => {
    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         product.sku.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = selectedCategory === 'all' || product.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 className="text-3xl font-bold text-foreground">Manajemen Produk</h1>
          <p className="text-muted-foreground">Kelola inventaris dan katalog produk Anda</p>
        </div>
      </div>

      <Tabs defaultValue="products" className="space-y-4">
        <TabsList>
          <TabsTrigger value="products">Produk</TabsTrigger>
          <TabsTrigger value="storage">Gudang</TabsTrigger>
          <TabsTrigger value="distribution">Distribusi</TabsTrigger>
        </TabsList>

        <TabsContent value="products">
          <div className="flex justify-between items-center mb-4">
            <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>
          <ProductPermissions allowEdit={true}>
            <DialogTrigger asChild>
              <Button onClick={resetForm} className="bg-gradient-to-r from-primary to-primary/80">
                <IconWrapper icon={Plus} className="h-4 w-4 mr-2" />
                Tambah Produk
              </Button>
            </DialogTrigger>
          </ProductPermissions>
          <DialogContent className="sm:max-w-[500px]">
            <DialogHeader>
              <DialogTitle>{editingProduct ? 'Edit Produk' : 'Tambah Produk Baru'}</DialogTitle>
            </DialogHeader>
            <form onSubmit={async (e) => {
              e.preventDefault();

              if (!user) {
                toast({
                  title: "Akses Ditolak",
                  description: "Anda harus login terlebih dahulu.",
                  variant: "destructive"
                });
                return;
              }

              if (!isAdmin) {
                toast({
                  title: "Akses Ditolak",
                  description: "Hanya administrator yang dapat menambah atau mengubah produk.",
                  variant: "destructive"
                });
                return;
              }

              if (!formData.name || !formData.sku || formData.price === null || formData.stock === null || !formData.category) {
                toast({
                  title: "Data Tidak Lengkap",
                  description: "Mohon lengkapi semua field yang diperlukan.",
                  variant: "destructive"
                });
                return;
              }

              const productData = {
                name: formData.name,
                sku: formData.sku,
                price: Number(formData.price),
                stock: Number(formData.stock),
                category: formData.category,
                description: formData.description || ''
              };

              try {
                const finalProductData = {
                  ...productData,
                  price: Math.max(0, Number(productData.price)),
                  stock: Math.max(0, Number(productData.stock))
                };

                if (editingProduct) {
                  await updateProduct(editingProduct.id, finalProductData);
                  toast({
                    title: "Produk diperbarui",
                    description: `${finalProductData.name} telah diperbarui.`
                  });
                } else {
                  await addProduct(finalProductData);
                  toast({
                    title: "Produk ditambahkan",
                    description: `${finalProductData.name} telah ditambahkan ke katalog.`
                  });
                }
                setIsAddDialogOpen(false);
                resetForm();
              } catch (error) {
                console.error('Error saving product:', error);
                let errorMessage = "Terjadi kesalahan saat menyimpan produk.";
                
                if (error instanceof Error) {
                  if (error.message.includes("duplicate key")) {
                    errorMessage = "SKU produk sudah digunakan. Mohon gunakan SKU yang berbeda.";
                  } else if (error.message.includes("permission denied")) {
                    errorMessage = "Anda tidak memiliki izin untuk menambah produk. Pastikan Anda sudah login sebagai admin.";
                  } else if (error.message.includes("not found")) {
                    errorMessage = "Koneksi ke database gagal. Mohon coba lagi.";
                  }
                }
                
                toast({
                  title: "Gagal menyimpan produk",
                  description: errorMessage,
                  variant: "destructive",
                });
              }
            }} className="space-y-4">
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="name">Nama Produk</Label>
                    <Input
                      id="name"
                      required
                      value={formData.name}
                      onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="sku">SKU</Label>
                    <Input
                      id="sku"
                      required
                      value={formData.sku}
                      onChange={(e) => setFormData(prev => ({ ...prev, sku: e.target.value }))}
                    />
                  </div>
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="price">Harga (Rp)</Label>
                    <Input
                      id="price"
                      type="number"
                      required
                      min={0}
                      value={formData.price}
                      onChange={(e) => setFormData(prev => ({ ...prev, price: Number(e.target.value) }))}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="stock">Stok</Label>
                    <Input
                      id="stock"
                      type="number"
                      required
                      min={0}
                      value={formData.stock}
                      onChange={(e) => setFormData(prev => ({ ...prev, stock: Number(e.target.value) }))}
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="category">Kategori</Label>
                  <Input
                    id="category"
                    required
                    value={formData.category}
                    onChange={(e) => setFormData(prev => ({ ...prev, category: e.target.value }))}
                    placeholder="Contoh: Minuman, Makanan, Snack"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="description">Deskripsi (Opsional)</Label>
                  <Input
                    id="description"
                    value={formData.description}
                    onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                  />
                </div>
              </div>

              <div className="flex justify-end space-x-2">
                <Button type="button" variant="outline" onClick={() => {
                  setIsAddDialogOpen(false);
                  resetForm();
                }}>Batal</Button>
                <Button type="submit">{editingProduct ? 'Simpan Perubahan' : 'Tambah Produk'}</Button>
              </div>
            </form>
          </DialogContent>
        </Dialog>
      </div>

      {/* Filters */}
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="flex-1">
          <div className="relative">
            <IconWrapper icon={Search} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
            <Input
              placeholder="Cari produk..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>
        </div>
        <select
          value={selectedCategory}
          onChange={(e) => setSelectedCategory(e.target.value)}
          className="px-3 py-2 border border-input bg-background text-foreground rounded-md focus:outline-none focus:ring-2 focus:ring-ring"
        >
          {categories.map(category => (
            <option key={category} value={category}>
              {category === 'all' ? 'Semua Kategori' : category}
            </option>
          ))}
        </select>
      </div>

      {/* Products Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {filteredProducts.map(product => (
          <Card key={product.id} className="hover:shadow-lg transition-shadow">
            <CardHeader className="pb-3">
              <div className="flex justify-between items-start">
                <div className="flex-1">
                  <CardTitle className="text-lg">{product.name}</CardTitle>
                  <p className="text-sm text-muted-foreground">{product.sku}</p>
                </div>
                <div className="flex space-x-1">
                  <ProductPermissions allowEdit={true}>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleEdit(product)}
                    >
                      <IconWrapper icon={Edit2} className="h-4 w-4" />
                    </Button>
                  </ProductPermissions>

                  <ProductPermissions allowEdit={true}>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => {
                        setAdjustingProduct(product);
                        setIsStockAdjustmentOpen(true);
                      }}
                    >
                      <IconWrapper icon={History} className="h-4 w-4" />
                    </Button>
                  </ProductPermissions>

                  <ProductPermissions allowEdit={false}>
                    <AlertDialog>
                      <AlertDialogTrigger asChild>
                        <Button variant="ghost" size="sm">
                          <IconWrapper icon={Trash2} className="h-4 w-4" />
                        </Button>
                      </AlertDialogTrigger>
                      <AlertDialogContent>
                        <AlertDialogHeader>
                          <AlertDialogTitle>Konfirmasi Penghapusan Produk</AlertDialogTitle>
                          <AlertDialogDescription className="space-y-2">
                            <p>Anda akan menghapus produk berikut:</p>
                            <div className="font-medium">
                              <p>Nama: {product.name}</p>
                              <p>SKU: {product.sku}</p>
                              <p>Stok: {product.stock} unit</p>
                            </div>
                            <p className="text-red-500">
                              PERHATIAN: Produk yang memiliki riwayat transaksi penjualan tidak dapat dihapus 
                              untuk menjaga integritas data laporan penjualan.
                            </p>
                          </AlertDialogDescription>
                        </AlertDialogHeader>
                        <AlertDialogFooter>
                          <AlertDialogCancel>Batal</AlertDialogCancel>
                          <AlertDialogAction onClick={() => handleDelete(product)}>Hapus</AlertDialogAction>
                        </AlertDialogFooter>
                      </AlertDialogContent>
                    </AlertDialog>
                  </ProductPermissions>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <div className="flex justify-between items-start">
                  <div className="space-y-1">
                    <Label>Kategori</Label>
                    <Badge variant="secondary">{product.category}</Badge>
                  </div>
                  <div className="text-right">
                    <Label>Stok</Label>
                    <p className={`font-medium ${product.stock <= 10 ? 'text-red-500' : ''}`}>
                      {product.stock} unit
                    </p>
                  </div>
                </div>
                <div>
                  <Label>Harga</Label>
                  <p className="font-medium">
                    Rp {product.price.toLocaleString('id-ID')}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {filteredProducts.length === 0 && (
        <div className="text-center py-12">
          <IconWrapper icon={Package} className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-foreground">Produk tidak ditemukan</h3>
          <p className="text-muted-foreground">
            {searchTerm || selectedCategory !== 'all' 
              ? 'Coba ubah pencarian atau filter' 
              : 'Tambahkan produk pertama Anda untuk memulai'
            }
          </p>
        </div>
      )}
    </div>
  );
};

export default Products;